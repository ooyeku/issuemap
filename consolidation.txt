# IssueMap Command Consolidation Plan

## Overview
Reducing command count from 37 to 26 commands (~30% reduction) while maintaining all essential functionality through better organization.

## Commands to DELETE (11 commands)

### 1. `deps` → DELETE
- **Reason:** Redundant with `depend` command
- **Current:** Visualizes and analyzes dependencies
- **Migration:** Add flags to `depend` command:
  - `depend --graph` (show dependency graph)
  - `depend --stats` (show dependency statistics)
  - `depend --blocked` (list blocked issues)
  - `depend --impact ISSUE-ID` (analyze impact)

### 2. `logs` → DELETE
- **Reason:** Too specific, only shows cleanup logs
- **Current:** Views cleanup operation logs
- **Migration:** Move to `cleanup logs` subcommand

### 3. `guide` → DELETE
- **Reason:** Interactive guides belong in documentation
- **Current:** Shows comprehensive usage guide
- **Migration:** Improve `--help` messages and web documentation

### 4. `resolve` → DELETE
- **Reason:** Overlaps with `close`, rarely used
- **Current:** Resolves conflicts between branches and issues
- **Migration:** Add `--resolve-conflicts` flag to `close` command

### 5. `compress` → DELETE
- **Reason:** Too granular, should be automatic
- **Current:** Manages attachment compression
- **Migration:** Move to `storage compress` subcommand

### 6. `dedup` → DELETE
- **Reason:** Edge case feature that should be automatic
- **Current:** Finds and merges duplicate issues
- **Migration:** Add to `bulk --dedup` or make automatic with warnings

### 7. `restore` → DELETE
- **Reason:** Overlaps with `archive` functionality
- **Current:** Restores from backups
- **Migration:** Use `archive --restore` flag

### 8. `global` → DELETE
- **Reason:** Overengineered, cross-project operations are rare
- **Current:** Operations across all projects
- **Migration:** Use shell scripting for multi-project needs

### 9. `velocity` → DELETE
- **Reason:** Too specific, belongs in reporting
- **Current:** Calculates team velocity metrics
- **Migration:** Move to `report --type velocity`

### 10. `burndown` → DELETE
- **Reason:** Too specific, belongs in reporting
- **Current:** Generates burndown chart data
- **Migration:** Move to `report --type burndown`

### 11. `start` & `stop` (time tracking) → DELETE as standalone
- **Reason:** Confusing with `server start/stop`
- **Current:** Start/stop time tracking
- **Migration:** Create `time` command with subcommands

## Commands to CONSOLIDATE

### Server Commands
**Current structure:**
- `server start`
- `server stop`
- `server status`
- `start` (time tracking)
- `stop` (time tracking)

**New structure:**
- `server` command with subcommands:
  - `server start`
  - `server stop`
  - `server status`

### Time Tracking Commands
**Current structure:**
- `start` (start timer)
- `stop` (stop timer)
- `log` (manual time entry)

**New structure:**
- `time` command with subcommands:
  - `time start ISSUE-ID`
  - `time stop [ISSUE-ID]`
  - `time log ISSUE-ID HOURS`
  - `time report` (time tracking reports)

### Report Commands
**Current structure:**
- `report` (time tracking reports)
- `velocity` (velocity metrics)
- `burndown` (burndown charts)

**New structure:**
- `report` command with types:
  - `report --type time` (default)
  - `report --type velocity`
  - `report --type burndown`
  - `report --type summary`

### Storage Commands
**Current structure:**
- `storage` (storage management)
- `cleanup` (cleanup operations)
- `compress` (compression settings)
- `archive` (archive management)
- `restore` (restore from backup)

**New structure:**
- `storage` command with subcommands:
  - `storage status` (current storage status)
  - `storage cleanup` (run cleanup)
  - `storage compress` (compression settings)
  - `storage archive` (archive old issues)
  - `storage restore` (restore from archive)
  - `storage config` (storage configuration)

### Dependency Commands
**Current structure:**
- `depend` (manage dependencies)
- `deps` (visualize dependencies)

**New structure:**
- `depend` command with enhanced flags:
  - `depend ISSUE-1 ISSUE-2 --type blocks`
  - `depend --list ISSUE-ID`
  - `depend --graph` (from deps)
  - `depend --stats` (from deps)
  - `depend --blocked` (from deps)
  - `depend --validate` (from deps)
  - `depend --impact ISSUE-ID` (from deps)

## Final Command Structure (26 commands)

### Core Operations (10)
1. `init` - Initialize issuemap in repository
2. `create` - Create new issue
3. `list` - List issues
4. `show` - Show issue details
5. `edit` - Edit issue
6. `delete` - Delete issue
7. `close` - Close issue (with --resolve-conflicts)
8. `assign` - Assign/unassign issue
9. `search` - Advanced search
10. `bulk` - Bulk operations (with --dedup)

### Git Integration (3)
1. `branch` - Create/manage issue branches
2. `sync` - Synchronize with git
3. `history` - View issue history

### Organization (3)
1. `template` - Manage issue templates
2. `depend` - Manage dependencies (enhanced)
3. `estimate` - Set time estimates

### Data Management (4)
1. `attach` - Manage attachments
2. `storage` - Storage management (with subcommands)
3. `report` - Generate reports (with types)
4. `time` - Time tracking (with subcommands)

### Server & UI (3)
1. `server` - HTTP server management (with subcommands)
2. `web` - Open web UI
3. `version` - Show version info

### Cleanup Operations (3)
1. `cleanup` - Cleanup management (simplified)
   - `cleanup run` - Run cleanup
   - `cleanup config` - Configure cleanup
   - `cleanup logs` - View cleanup logs

## Migration Path

### Phase 1: Add new structure (backwards compatible)
- Implement `time` command with subcommands
- Add enhanced flags to `depend`
- Add subcommands to `storage`
- Add `--type` flag to `report`

### Phase 2: Deprecation warnings
- Add deprecation warnings to deleted commands
- Point users to new commands in warnings
- Update documentation

### Phase 3: Remove deprecated commands
- Remove the 11 deprecated commands
- Clean up codebase
- Update all documentation and examples

## Benefits

1. **Reduced Complexity:** 30% fewer commands to learn
2. **Better Organization:** Logical grouping of related functionality
3. **Clearer Naming:** No confusion between `start` (time) and `server start`
4. **Maintainability:** Less code duplication, easier to maintain
5. **User Experience:** More intuitive command structure
6. **Documentation:** Easier to document and explain

## Implementation Priority

1. **High Priority:**
   - Consolidate `start`/`stop` into `time` command (confusion issue)
   - Merge `deps` into `depend` (clear redundancy)
   - Consolidate storage-related commands

2. **Medium Priority:**
   - Move `velocity`/`burndown` into `report`
   - Remove `global` command
   - Remove `guide` command

3. **Low Priority:**
   - Remove `resolve` command
   - Remove `dedup` command
   - Clean up remaining edge cases

## Backwards Compatibility

For a transition period (e.g., 3 releases):
- Keep old commands but show deprecation warnings
- Old commands internally call new commands
- Update documentation to show new commands
- Provide migration guide for scripts/automation